
#if 0
gboolean tyon_xcelerator_calibration_start(RoccatDevice *device, GError **error) {
    TyonInfo info = { 0 };
    info.function = TYON_INFO_FUNCTION_XCELERATOR_CALIB_START;
    return tyon_info_write(device, &info, error);
}

gboolean tyon_xcelerator_calibration_data(RoccatDevice *device, guint8 min, guint8 mid, guint8 max, GError **error) {
    TyonInfo info = { 0 };
    info.function = TYON_INFO_FUNCTION_XCELERATOR_CALIB_DATA;
    info.xcelerator_min = min;
    info.xcelerator_mid = mid;
    info.xcelerator_max = max;
    return tyon_info_write(device, &info, error);
}

gboolean tyon_xcelerator_calibration_end(RoccatDevice *device, GError **error) {
    TyonInfo info = { 0 };
    info.function = TYON_INFO_FUNCTION_XCELERATOR_CALIB_END;
    return tyon_info_write(device, &info, error);
}


gboolean tyon_info_write(RoccatDevice *device, TyonInfo *info, GError **error) {
    tyon_info_finalize(info);
    return tyon_device_write(device, (gchar const *)info, sizeof(TyonInfo), error);
}

gboolean tyon_reset(RoccatDevice *device, GError **error) {
    TyonInfo info = { 0 };
    info.function = TYON_INFO_FUNCTION_RESET;
    return tyon_info_write(device, &info, error);
}

guint tyon_firmware_version_read(RoccatDevice *device, GError **error) {
    TyonInfo *info;
    guint result;

    info = tyon_info_read(device, error);
    if (!info)
        return kIOReturnSuccess;
    result = info->firmware_version;
    g_free(info);
    return result;
}

TyonMacro *tyon_macro_read(RoccatDevice *tyon, guint profile_index, guint button_index, GError **error) {
    TyonMacro1 *macro1;
    TyonMacro2 *macro2;
    TyonMacro *macro;

    g_assert(profile_index < TYON_PROFILE_NUM);

    gaminggear_device_lock(GAMINGGEAR_DEVICE(tyon));

    if (!tyon_select(tyon, profile_index, TYON_CONTROL_DATA_INDEX_MACRO_1, button_index, error)) {
        gaminggear_device_unlock(GAMINGGEAR_DEVICE(tyon));
        return NULL;
    }

    macro1 = (TyonMacro1 *)tyon_device_read(tyon, TYON_REPORT_ID_MACRO, sizeof(TyonMacro1), error);
    if (!macro1) {
        gaminggear_device_unlock(GAMINGGEAR_DEVICE(tyon));
        return NULL;
    }

    if (!tyon_select(tyon, profile_index, TYON_CONTROL_DATA_INDEX_MACRO_2, button_index, error)) {
        gaminggear_device_unlock(GAMINGGEAR_DEVICE(tyon));
        g_free(macro1);
        return NULL;
    }

    macro2 = (TyonMacro2 *)tyon_device_read(tyon, TYON_REPORT_ID_MACRO, sizeof(TyonMacro2), error);
    if (!macro2) {
        gaminggear_device_unlock(GAMINGGEAR_DEVICE(tyon));
        g_free(macro1);
        return NULL;
    }

    gaminggear_device_unlock(GAMINGGEAR_DEVICE(tyon));

    macro = (TyonMacro *)g_malloc(sizeof(TyonMacro));
    memcpy(macro, macro1->data, TYON_MACRO_1_DATA_SIZE);
    memcpy((guint8 *)macro + TYON_MACRO_1_DATA_SIZE, macro2->data, TYON_MACRO_2_DATA_SIZE);

    g_free(macro1);
    g_free(macro2);

    return macro;
}



TyonControlUnit *tyon_control_unit_read(RoccatDevice *tyon, GError **error) {
    return (TyonControlUnit *)tyon_device_read(tyon, TYON_REPORT_ID_CONTROL_UNIT, sizeof(TyonControlUnit), error);
}

static gboolean tyon_control_unit_write(RoccatDevice *tyon, TyonControlUnit const *data, GError **error) {
    return tyon_device_write(tyon, (char const *)data, sizeof(TyonControlUnit), error);
}

gboolean tyon_tracking_control_unit_test(RoccatDevice *tyon, guint dcu, guint median, GError **error) {
    TyonControlUnit control_unit;

    control_unit.report_id = TYON_REPORT_ID_CONTROL_UNIT;
    control_unit.size = sizeof(TyonControlUnit);
    control_unit.dcu = dcu;
    control_unit.tcu = TYON_TRACKING_CONTROL_UNIT_ON;
    control_unit.median = median;
    control_unit.action = TYON_CONTROL_UNIT_ACTION_CANCEL;

    return tyon_control_unit_write(tyon, &control_unit, error);
}

gboolean tyon_tracking_control_unit_cancel(RoccatDevice *tyon, guint dcu, GError **error) {
    return tyon_tracking_control_unit_test(tyon, dcu, 0, error);
}

gboolean tyon_tracking_control_unit_accept(RoccatDevice *tyon, guint dcu, guint median, GError **error) {
    TyonControlUnit control_unit;

    control_unit.report_id = TYON_REPORT_ID_CONTROL_UNIT;
    control_unit.size = sizeof(TyonControlUnit);
    control_unit.dcu = dcu;
    control_unit.tcu = TYON_TRACKING_CONTROL_UNIT_ON;
    control_unit.median = median;
    control_unit.action = TYON_CONTROL_UNIT_ACTION_ACCEPT;

    return tyon_control_unit_write(tyon, &control_unit, error);
}

gboolean tyon_tracking_control_unit_off(RoccatDevice *tyon, guint dcu, GError **error) {
    TyonControlUnit control_unit;

    control_unit.report_id = TYON_REPORT_ID_CONTROL_UNIT;
    control_unit.size = sizeof(TyonControlUnit);
    control_unit.dcu = dcu;
    control_unit.tcu = TYON_TRACKING_CONTROL_UNIT_OFF;
    control_unit.median = 0;
    control_unit.action = TYON_CONTROL_UNIT_ACTION_OFF;

    return tyon_control_unit_write(tyon, &control_unit, error);
}

guint tyon_distance_control_unit_get(RoccatDevice *tyon, GError **error) {
    TyonControlUnit *control_unit;
    guint retval;

    control_unit = tyon_control_unit_read(tyon, error);
    if (!control_unit)
        return 0;

    retval = control_unit->dcu;
    g_free(control_unit);
    return retval;
}

gboolean tyon_distance_control_unit_try(RoccatDevice *tyon, guint new_dcu, GError **error) {
    TyonControlUnit control_unit;

    control_unit.report_id = TYON_REPORT_ID_CONTROL_UNIT;
    control_unit.size = sizeof(TyonControlUnit);
    control_unit.dcu = new_dcu;
    control_unit.tcu = 0xff;
    control_unit.median = 0xff;
    control_unit.action = TYON_CONTROL_UNIT_ACTION_UNDEFINED;

    return tyon_control_unit_write(tyon, &control_unit, error);
}

gboolean tyon_distance_control_unit_cancel(RoccatDevice *tyon, guint old_dcu, GError **error) {
    TyonControlUnit control_unit;

    control_unit.report_id = TYON_REPORT_ID_CONTROL_UNIT;
    control_unit.size = sizeof(TyonControlUnit);
    control_unit.dcu = old_dcu;
    control_unit.tcu = 0xff;
    control_unit.median = 0xff;
    control_unit.action = TYON_CONTROL_UNIT_ACTION_CANCEL;

    return tyon_control_unit_write(tyon, &control_unit, error);
}

gboolean tyon_distance_control_unit_accept(RoccatDevice *tyon, guint new_dcu, GError **error) {
    TyonControlUnit control_unit;

    control_unit.report_id = TYON_REPORT_ID_CONTROL_UNIT;
    control_unit.size = sizeof(TyonControlUnit);
    control_unit.dcu = new_dcu;
    control_unit.tcu = 0xff;
    control_unit.median = 0xff;
    control_unit.action = TYON_CONTROL_UNIT_ACTION_ACCEPT;

    return tyon_control_unit_write(tyon, &control_unit, error);
}
#endif
